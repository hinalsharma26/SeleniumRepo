package FirstMavenPack;

import org.testng.annotations.Test;

public class SurefireCommands {
/*
 > You can delete the AppTest.java class that was generated by default when the Maven skeleton was created.

In command prompt, first you need to set the path/location where your pom.xml file is located, to perform operations on the file.
If the file is located under the Maven Project, then provide the path of the Maven project, which could be found in 
Project > Right Click > Properties > Location > Copy the path

Then, provide the below command in cmd (cd location)
C:\Users\hinal> cd C:\Users\hinal\JavaSeleniumProjects\FirstMavenArtifact1

Hit Enter, so you will get below path
C:\Users\hinal\JavaSeleniumProjects\FirstMavenArtifact1>

Then provide mvn commands.
C:\Users\hinal\JavaSeleniumProjects\FirstMavenArtifact1>mvn clean

Three main Commands of Maven: (All maven commands start with mvn) (clean, compile, test)
 1. Clean
 Open Command prompt cmd > mvn clean
 It will delete all temporary files or builds or previous references that the current maven project has.
 This is preferred before you execute tests.
 In general if you see any build errors, and you fix that it is better to clean the project and start afresh/executing stuff.
 
 2. Compile
 Checking the syntax errors of your code.
 Eclipse also gives syntax errors, but when you integrate Jenkins, eclipse wont be there any more. So we use Maven compile
 to compile your code and tells you if there are any syntax errors.
 
 3. Test (Generally, people first clean, then compile and then test)
 To start/trigger your test exection
 If you only give mvn test command, it will still clean and compile as a pre-requisite.
 But, if you want to deliberately clean and compile, you can use these commands.
 When you hit the mvn test command, it will read all your dependencies in the pom.xml file.
 Then, first it checks your LOCAL Maven repository (C:\Users\hinal\.m2\repository)  which was brought by Maven earlier.

 If not found/present, it will then connect to mvnrepository website to bring the required jars.
 
 > If you comment out the @Test (//@Test) this test will not be picked up by Maven and will not be executed.
 > IMPORTANT: If you want Surefire plugin to recognize your tests under src/test/java folder, then all your java class files 
 MUST end with 'Test' keyword... Otherwise, it will not be executed by Surefire../maven mvn test
 
 */
	@Test
	public void check()
	{
		System.out.println("I am surefire commands instructions");
	}
}
